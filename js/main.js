// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.App = {
    Models: {},
    Collections: {},
    Views: {}
  };

  jQuery(function() {
    var MainView;
    App.Views.MainView = (function(_super) {
      __extends(MainView, _super);

      function MainView() {
        this.renderItem = __bind(this.renderItem, this);
        this.getObjectParentView = __bind(this.getObjectParentView, this);
        return MainView.__super__.constructor.apply(this, arguments);
      }

      MainView.prototype.el = $('#list');

      MainView.prototype.activeItem = {
        id: null,
        view: null
      };

      MainView.prototype.events = {
        'click button.add-new': 'addItem',
        'click button.reset-parent': 'resetParent'
      };

      MainView.prototype.initialize = function() {
        this.resetParent();
        this.list = new App.Collections.List;
        this.list.bind('add', this.renderItem);
        return this.list.fetch();
      };

      MainView.prototype.resetParent = function() {
        return this.activeItem = {
          id: null,
          view: this.el
        };
      };

      MainView.prototype.addItem = function() {
        return this.list.addNew({
          title: 'jaunais item',
          parent_id: this.activeItem.id
        });
      };

      MainView.prototype.addChildItem = function() {
        return this.list.addNew({
          title: 'jaunais item',
          parent_id: this.activeItem.id
        });
      };

      MainView.prototype.getObjectParentView = function(item) {
        var view;
        view = $("#object-" + (item.get('parent_id')));
        if (view.length) {
          return view;
        }
        return $(this.el);
      };

      MainView.prototype.renderItem = function(item) {
        var item_view;
        item_view = new App.Views.Item({
          model: item,
          parent: this
        });
        return this.getObjectParentView(item).append(item_view.render().el);
      };

      return MainView;

    })(Backbone.View);
    return MainView = new App.Views.MainView();
  });

}).call(this);
